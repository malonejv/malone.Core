name: Build Workflow
description: Build application
inputs:
   MALONECORE_ENVIRONMENT:
     required: true
     default: 'Development'
   MALONECORE_CONFIGURATION:
     required: true
     default: 'Release'
   MALONECORE_VERBOSE:
     required: true
     default: 'True'
   MALONECORE_SHOULDPACK:
     required: true
     default: ''
   BRANCH:
     required: true
     default: ''
   SHOULD_COMMIT:
     required: true
     default: ''
   SOLUTION_PATH:
     required: true
     default: ''
   SCRIPTS_DIR:
     required: true
     default: ''
   BUILD_ARTIFACTS_NAME:
     required: true
     default: 'build-artifacts'
   GIT_USERNAME:
     required: true
     default: ''
   GIT_USERMAIL:
     required: true
     default: ''
   NUGET_SOURCE:
     required: true
     default: ''
   NUGET_USERNAME:
     required: true
     default: ''
   NUGET_PASSWORD:
     required: true
     default: ''

outputs:
  version_number: 
    description: "Version number"
    value: ${{ steps.version_number.outputs.version_number }}

runs:
  using: "composite"
      
  steps:

  - uses: actions/checkout@v2
  
  - name: Setup MSBuild
    uses: microsoft/setup-msbuild@v1.1

  - name: Setup NuGet
    uses: NuGet/setup-nuget@v1.0.5

  - name: Add GitHub as Nuget Source
    shell: pwsh
    run: nuget sources add -name "github" -Source ${{ inputs.NUGET_SOURCE }} -Username ${{ inputs.NUGET_USERNAME }} -Password ${{ inputs.NUGET_PASSWORD }}
    
  - name: Restore Nuget Packages
    shell: pwsh
    run:  nuget restore ${{ inputs.SOLUTION_PATH }}
  
  - name: Build application
    shell: pwsh
    run: msbuild ${{ inputs.SOLUTION_PATH }} /t:Build /p:Configuration="${{ inputs.MALONECORE_CONFIGURATION }}"

  - name: Preparing artifacts
    shell: pwsh
    run: |
           $buildObjects="${{ inputs.BUILD_ARTIFACTS_NAME }}"
           New-Item -Path "${{ github.workspace }}" -Name $buildObjects -ItemType Directory
           $solutionDir = "${{ inputs.SOLUTION_PATH }}" | Split-Path
           $scriptsDir="${{ inputs.SCRIPTS_DIR }}"
           $solutionPath="${{ inputs.SOLUTION_PATH }}"
           Invoke-Expression "$scriptsDir\Get-ProjectsInSolution.ps1 -Path `"$solutionPath`" -Type `"NonTestProjects`" -Verbose" -Outvariable projects
           $projects | ForEach-Object { 
              $projectName = Split-Path $_ -Leaf
              $folderName = $projectName.substring(0,$projectName.lastIndexOf('.'))
              Write-Verbose "$folderName"
              New-Item -Path "${{ github.workspace }}\$buildObjects" -Name $folderName -ItemType Directory 
              Copy-Item "$solutionDir\$folderName\bin\" -Destination "${{ github.workspace }}\$buildObjects\$folderName" -Recurse -Container }
           Get-ChildItem "${{ github.workspace }}\\${{ inputs.BUILD_ARTIFACTS_NAME }}" -Recurse -Depth 3 -Include malone.Core*
           
  - name: Upload artifacts
    uses: actions/upload-artifact@v2
    with:
      name: "${{ inputs.BUILD_ARTIFACTS_NAME }}"
      path: "${{ github.workspace }}/${{ inputs.BUILD_ARTIFACTS_NAME }}/*"
      if-no-files-found: error
      retention-days: 5

  - name: Push after version updated
    shell: pwsh
    run: |
          if([bool]::parse("${{ inputs.SHOULD_COMMIT }}")){
              git config user.email "${{ inputs.GIT_USERMAIL }}"
              git config user.name "${{ inputs.GIT_USERNAME }}"
              git add .
              git commit -m "Version updated"
              git push origin "${{ inputs.BRANCH }}"}

